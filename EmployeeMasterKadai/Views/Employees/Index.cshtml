@model IEnumerable<EmployeeMasterKadai.Models.Employee>

@{
    ViewData["Title"] = "社員マスタ";
}

<!-- 追加モーダルを表示するボタン -->
<button type="button" class="btn btn-primary mb-3" id="openCreateModal">
    追加<i class="bi bi-person-add"></i>
</button>
<br>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Department)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RetirementFlag)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RetirementDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UpdatedAt)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Department)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RetirementFlag)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RetirementDay)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedAt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedAt)
            </td>
             


            <td>
                <!-- モーダルを表示するトリガーボタン -->
                <button type="button" class="btn btn-primary openEditModal" data-id="@item.Id" data-retirementFlag="@item.RetirementFlag">
                    編集<i class="bi bi-person-add"></i>
                </button>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">削除</a>
            </td>
        </tr>
}
    </tbody>
</table>

<!-- モーダルウィンドウ -->
<div class="modal fade" id="externalModal" tabindex="-1" aria-labelledby="externalModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title fs-5 mb-1 mt-1" id="exampleModalLabel"></div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalContentPlaceholder"></div>
            <div class="modal-footer mb-1 mt-1" id="modalFooter"></div>
        </div>
    </div>
</div>


<div class="modal fade" id="messageModal" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="background-color: #f5f5f5">
            <div class="modal-header">
                <div class="modal-title fs-5  mb-1 mt-1" id="messageLavel"></div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" id="CloseBtn" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-5 pb-5 fw-bold fs-6" id="modalBody"></div>
            <div class="modal-footer p-1" id="closeModalBtn">
            </div>

        </div>
    </div>
</div>

<script src="~/js/Common.js"></script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }　

    <script>
        $(document).ready(function () {

            $('.openEditModal').on('click', function (e) {
                e.preventDefault();
                $('#externalModal').modal('show');

                const itemId = $(this).data('id');
                const retirementFlag = $(this).data('retirementflag');

                $.ajax({
                    url: '/Employees/Edit/' + itemId,
                    type: 'GET',
                    success: function (data) {

                        $('#modalContentPlaceholder').html(data);
                        $('#exampleModalLabel').text('社員の編集');
                        setFlagChecked(retirementFlag);

                        $('#retirementFlag').on('change', function () {
                            changeFlagChecked(this);
                        });
                        initForm();
                    }
                });
            });

            $('#openCreateModal').on('click', function (e) {
                e.preventDefault();
                $('#externalModal').modal('show');

                $.ajax({
                    url: '/Employees/Create',
                    type: 'GET',
                    success: function (data) {
                        $('#modalContentPlaceholder').html(data);
                        $('#exampleModalLabel').text('社員の登録');
                        $('#retirementFlag').on('change', function () {
                            changeFlagChecked(this);
                        });
                        initForm();
                    }
                });
            });

            function setFlagChecked(retirementFlag) {
                const retirementFlagString = retirementFlag.toString();
                const stylInputDay = $('#stylInputDay');

                if (retirementFlagString === "False") {
                    $('#retirementDayInput input[type="date"]').prop('disabled', true);
                    stylInputDay.css('color', '#999999');
                } else {
                    $('#retirementDayInput input[type="date"]').prop('disabled', false);
                    stylInputDay.css('color', '#000000');
                }
            }

            function getFormattedDate() {
                const today = new Date();
                const year = today.getFullYear();
                const month = String(today.getMonth() + 1).padStart(2, '0');
                const day = String(today.getDate()).padStart(2, '0');
                return year + '-' + month + '-' + day;
            }

            function changeFlagChecked(check) {
                const retirementFlagChecked = $(check).prop('checked');
                const retirementDayInput = $('#retirementDayInput input[type="date"]');

                const formattedDate = getFormattedDate();

                if (retirementFlagChecked) {
                    retirementDayInput.prop('disabled', false);
                    retirementDayInput.val(formattedDate);
                    $('#stylInputDay').css('color', '#000000');
                } else {
                    retirementDayInput.prop('disabled', true);
                    retirementDayInput.val('');
                    $('#stylInputDay').css('color', '#999999');
                }
            }

            function reSave(){
                setFlagChecked(retirementFlag);

                $('#retirementFlag').on('change', function () {
                    changeFlagChecked(this);
                });
                initForm()
            }

            //クライアントサイド入力チェック
            function isValid (retirementDay, retirementFlag){
                let message = "";
                const formattedDate = getFormattedDate();

                if (retirementDay > formattedDate) {
                    return "クライアントサイド：退職日は本日以前の日付を入力してください。";
                }
                if (!retirementDay && retirementFlag == true) {
                    message += "クライアントサイド：退職日を入力してください。";
                }
                return message || null;
            };
            //ここまで消す



            function initForm(retirementFlag){
                const $form = $('#modalContentPlaceholder').find('form');

                // 入力コントロールが読み込まれてから入力チェック機能を有効にする
                $.validator.unobtrusive.parse($form);

                $form.on('submit', function (e) {
                    e.preventDefault();
                    console.log('Submitボタンが押されました');

                    if (!$form.valid()) {
                        showErrorModal();
                         return false; 
                    }
                    //ここから
                    const retirementDay = $('#retirementDay').val();
                    const retirementFlag = $('#retirementFlag').prop('checked');
                    const validationMessage = isValid(retirementDay, retirementFlag);

                    if (validationMessage) {
                        showErrorModal();
                        serverErrorModal(validationMessage);
                        initForm();
                    }
                    //ここまで消す

                    const callback = function () {
                        $.ajax({
                            type: 'post',
                            url: $form.attr('action'), 
                            data: $form.serialize(), 
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                        }).done((data) => {
                            if (data.success) {
                                location.reload();
                            }
                            else {
                                $('#modalContentPlaceholder').html(data);                       
                                reSave();
                            }
                        });
                    };

                    let savedata = function () {
                        if ($form.attr('action') === '/Employees/Create') {
                            showConfirmationModal('/Employees/Create', '新規登録します。よろしいですか？', callback);
                        } 
                        else {
                            showConfirmationModal('/Employees/Update', '更新します。よろしいですか？', callback);
                        }
                    }
                    //ここから
                    if (!validationMessage) {
                        Promise.all([
                            $.ajax({
                                type: 'post',
                                url: '/Employees/ErrorCheck',
                                data: $form.serialize(),
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8'
                            })
                        ]).then(([errorCheckResponse]) => {
                        console.log(errorCheckResponse)
                            if (errorCheckResponse.warning) {
                                serverErrorModal(errorCheckResponse.message);
                                initForm();
                            }

                     savedata();　//ここは残す
                        });              
                    }
                    //ここまで消す
                });
            };
        });
    </script>
}