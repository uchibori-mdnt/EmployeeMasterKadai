@model IEnumerable<EmployeeMasterKadai.Models.EmployeeList>
@using EmployeeMasterKadai.Common

@{
    ViewData["Title"] = "Index";
}

<!-- 追加モーダルを表示するボタン -->
<button type="button" class="btn btn-primary mb-3" id="openCreateModal">
    追加<i class="bi bi-person-add"></i>
</button>
<br>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Department)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RetirementFlag)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RetirementDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UpdatedAt)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Department)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RetirementFlag)
                </td>
                <td>
@*                     @{
                        var retirementDayDateFormat = new DateFormat();
                        var formattedRetirementDay = retirementDayDateFormat.Format(item.RetirementDay, "yyyy年MM月dd日");
                    }
                    @formattedRetirementDay *@

                    @* ※※※標準の機能がありますよ *@
                    @Html.DisplayFor(modelItem => item.RetirementDay)
                </td>
                <td>
                    @{
                        var createdAtDateFormat = new DateFormat();
                        var formattedCreatedAtDate = createdAtDateFormat.Format(item.CreatedAt, "yyyy年MM月dd日 hh:mm");
                    }
                    @formattedCreatedAtDate
                </td>
                <td>
                    @{
                        var updatedAtDateFormat = new DateFormat();
                        var formattedUpdatedAtDate = updatedAtDateFormat.Format(item.UpdatedAt, "yyyy年MM月dd日 hh:mm");
                    }
                    @formattedUpdatedAtDate
                </td>


                <td>
                    <!-- モーダルを表示するトリガーボタン -->
                    <button type="button" class="btn btn-primary openEditModal" data-id="@item.Id">
                        編集<i class="bi bi-person-add"></i>
                    </button>
                    <a asp-action="Delete" asp-route-id="@item.Id">削除</a>
                </td>
            </tr>
        }

    </tbody>
</table>

<!-- モーダルウィンドウ -->
<div class="modal fade" id="externalModal" tabindex="-1" aria-labelledby="externalModalLabel" aria-hidden="true">
    <div class="modal-dialog">　@*modal-sm、modal-lg*@
        <div class="modal-content">
            <div class="modal-body" id="modalContentPlaceholder"></div>
            @*
            モーダルの中にエラーを表示させたい
            <div id="errorMessages"></div> *@
        </div>
    </div>

</div>


@section Scripts {
         @* ※※※この中で記述したコードは_Layoutページのawait RenderSectionAsync("Scripts", required: false)に入ります *@
    @{
        // ※※※モーダルをajaxで取得した後、validationをonにしましょう
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }　

    <script>
        $(document).ready(function () {
            $('.openEditModal').on('click', function (e) {
                e.preventDefault();
                $('#externalModal').modal('show');

                var itemId = $(this).data('id');

                $.ajax({
                    url: '/EmployeeLists/Edit/' + itemId,
                    type: 'GET',
                    success: function (data) {
                        $('#modalContentPlaceholder').html(data);

                    }
                });
            });

            // 追加モーダルを表示するボタンがクリックされた場合
            $('#openCreateModal').on('click', function (e) {
                e.preventDefault();
                $('#externalModal').modal('show');

                $.ajax({
                    url: '/EmployeeLists/Create',
                    type: 'GET',
                    success: function (data) {
                        $('#modalContentPlaceholder').html(data);

                        //※※※フォームの設定をします
                        initForm();
                    }
                });
            });

            var initForm = () => {
                //※※※フォームの設定をします
                const $form = $('#modalContentPlaceholder').find('form');

                //※※※入力コントロールが読み込まれてから入力チェック機能をon
                $.validator.unobtrusive.parse($form);

                //※※※フォームの送信イベントをハンドル
                $form.on('submit', function (e) {
                    e.preventDefault(); // 通常のフォーム送信はキャンセルしてajaxでpost

                    if (!$form.valid()) {
                        return false;　//入力チェック×だったら送信キャンセル
                    }

                    // ajaxでpost
                    $.ajax({
                        type: 'post',
                        url: $form.attr('action'),  //送信先URL
                        data: $form.serialize(), //フォームデータ
                        contenttype: 'application/x-www-form-urlencoded; charset=utf-8',
                    }).done((data) => {
                        if (data.success) {
                            location.reload();
                            //tableのtr部分を受け取って部分的に書き換えても良い
                        } else {
                            $('#modalContentPlaceholder').html(data);
                            initForm();
                        }
                    });

                });
            };

            //※※※たぶんこれは無くてもよいです
        @*         $('.modal').on('click', function (e) {
            if (e.target !== this) return;
            $('#externalModal').modal('hide');
            }); *@
            });





        //モーダルの中にエラーを表示させたい
        // $(document).ready(function () {
        //     $('#submitFormButton').on('click', function (e) {
        //         e.preventDefault();

        //         var formData = $('#formData').serialize();

        //         console.log(formData);

        //         $.ajax({
        //             url: '/Schedules/Create',
        //             type: 'POST',
        //             data: formData,
        //             success: function (response) {
        //                 if (!response.success) {

        //                     $('#errorMessages').empty();
        //                     $.each(response.message.split('; '), function (index, errorMessage) {
        //                         $('#errorMessages').append('<p>' + errorMessage + '</p>');
        //                     });
        //                 }
        //                 else {
        //                     $('#externalModal').modal('hide');
        //                 }
        //             },
        //         });
        //     });
        // });
    </script>
}

