@model IEnumerable<EmployeeMasterKadai.Models.Schedule>
@using EmployeeMasterKadai.Common

@{
    ViewData["Title"] = "Index";
}

<!-- 追加モーダルを表示するボタン -->
<button type="button" class="btn btn-primary mb-3" id="createModal">
    追加<i class="bi bi-person-add"></i>
</button>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Organizer)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TypeToDo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AllDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.JoinPeople)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Organizer)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TypeToDo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AllDay)
            </td>


                <td>
                    @{
                        var startTimeValue = item.StartDay.Value.ToString("HH:mm");
                        var startDayValue = item.StartDay.Value.ToString("yyyy/MM/dd");

                        if (startTimeValue != "00:00")
                        {
                            @Html.DisplayFor(modelItem => item.StartDay)
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => startDayValue)    
                        }                   
                    }
                </td>
                <td>
                    @{
                        var endTimeValue = item.EndDay.Value.ToString("HH:mm");
                        var endDayValue = item.EndDay.Value.ToString("yyyy/MM/dd");

                        if (endTimeValue != "00:00")
                        {
                            @Html.DisplayFor(modelItem => item.EndDay)
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => endDayValue)
                        }
                    }
                </td>





@* 
            <td>
                @Html.DisplayFor(modelItem => item.StartDay)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EndDay)
            </td> *@
        
            <td>
                   

                @foreach (var person in item.JoinPeople)
                {
                    <div>@person</div>
                }
            </td>
            <td>
                    <button type="button" class="btn btn-primary editModal" data-id="@item.Id" data-all="@item.AllDay">
                        編集<i class="bi bi-person-add"></i>
                    </button>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">削除</a>
            </td>
        </tr>
}
    </tbody>
</table>



<!-- モーダルウィンドウ -->
<div class="modal fade" id="externalModal" tabindex="-1" aria-labelledby="externalModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title fs-5" id="exampleModalLabel"></div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalContentPlaceholder"></div>
            <div class="modal-footer" id="modalFooter"></div>
        </div>
    </div>
</div>


<!--エラーのモーダルウィンドウ-->
<div class="modal fade" id="messageModal" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="background-color: #d5e5ed">
            <div class="modal-header">
                <div class="modal-title fs-5" id="messageLavel"></div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" id="CloseBtn" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalBody"></div>
            <div class="modal-footer" id="closeModalBtn">
            </div>

        </div>
    </div>
</div>

<script src="~/js/Common.js"></script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

<script>

    $(document).ready(function () {
        
       // 編集モーダルを表示するボタンがクリックされた場合
        $('.editModal').on('click', function (e) {
            e.preventDefault();
            $('#externalModal').modal('show');

            var itemId = $(this).data('id');
            var all = $(this).data('all');

            $.ajax({
                url: '/Schedules/Edit/' + itemId,
                type: 'GET',
                success: function (data) {

                    $('#modalContentPlaceholder').html(data);
                    $('#exampleModalLabel').text('スケジュールの編集');
                    checkFlag(all);

                    $('#AllDay').on('change', function () {
                        checkAllDay(this);
                    });
                    scheduleTime();
                    setEditDateTime();
                    initForm();
                }
            });
        });

        // 追加モーダルを表示するボタンがクリックされた場合
        $('#createModal').on('click', function (e) {
            e.preventDefault();
            $('#externalModal').modal('show');

            $.ajax({
                url: '/Schedules/Create',
                type: 'GET',
                success: function (data) {

                    $('#modalContentPlaceholder').html(data);
                        $('#exampleModalLabel').text('スケジュールの登録');
                        setupTime();

                    $('#AllDay').on('change', function () {
                        checkAllDay(this);
                    });
                    scheduleTime();
                    initForm();
                }
            });
        });
        //既存の終日チェック確認
        function checkFlag(allDay) {
            var allDayFlagString = allDay.toString();
            var dateTimeInputs = $('#dateTimeInputs');
            var dateTimedInputs = $('#dateTimeEndInputs');

            if (allDayFlagString === "False") {
                    $('#startDay input[type="datetime-local"]').prop('disabled', false);
                    $('#startTime input[type="datetime-local"]').prop('disabled', false);
                    $('#startTime').prop('readonly', false);
                    dateTimeInputs.find('input').css('background-color', '#ffffff');
                    dateTimedInputs.find('input').css('background-color', '#ffffff');
            } else {
                    $('#startDay input[type="datetime-local"]').prop('disabled', true);
                    $('#startTime input[type="datetime-local"]').prop('disabled', true);
                    $('#startTime').prop('readonly', true);
                    dateTimeInputs.find('input').css('background-color', '#f2f2f2');
                    dateTimedInputs.find('input').css('background-color', '#f2f2f2');
            }
        }
        //終日チェックの有無で入力フィールド随時変更
        function checkAllDay(check) {
            var allDayChecked = $(check).prop('checked');
            var dateTimeInputs = $('#dateTimeInputs');
            var dateTimedInputs = $('#dateTimeEndInputs');

            if (allDayChecked) {
                $('#startTime input[type="datetime-local"]').prop('disabled', true);
                $('#endTime input[type="datetime-local"]').prop('disabled', true);
                $('#startTime').prop('readonly', true);

                dateTimeInputs.find('input').css('background-color', '#f2f2f2');
                dateTimedInputs.find('input').css('background-color', '#f2f2f2');
                dateTimeInputs.find('input').val('');
                dateTimedInputs.find('input').val('');

            } else {
                $('#startTime input[type="datetime-local"]').prop('disabled', false);
                $('#endTime input[type="datetime-local"]').prop('disabled', false);
                $('#startTime').prop('readonly', false);

                dateTimeInputs.find('input').css('background-color', '#ffffff');
                dateTimedInputs.find('input').css('background-color', '#ffffff');
            }
        }
        function setupTime() {
            var today = new Date();

            var year = today.getFullYear();
            var month = String(today.getMonth() + 1).padStart(2, '0');
            var day = String(today.getDate()).padStart(2, '0');

            var formattedDate = year + '-' + month + '-' + day;

            document.getElementById('startDate').value = formattedDate;
            document.getElementById('endDate').value = formattedDate;
        }

            function serverErrorModal(message) {
                $('#messageModal').modal('show');
                $('#messageLavel').text('確認');
                $('#modalBody').text(message);
                $('#closeModalBtn').html(yesButtonHtml);

                $('#closeModalBtn').on('click', 'input[type="submit"]', function () {
                    var checkedButtonValue = $(this).val();
                    if (checkedButtonValue === "もう一度入力") {
                        $('#messageModal').modal('hide');
                    }
                });
            }

        // フォームの初期化関数
        var initForm = (AllDay) => {
            const $form = $('#modalContentPlaceholder').find('form');         

            $.validator.unobtrusive.parse($form);

            $form.on('submit', function (e) {
                e.preventDefault();

                if (!$form.valid()) {
                    showErrorModal();
                    return false;
                }
                    Promise.all([
                        $.ajax({
                            type: 'post',
                            url: '/Schedules/SameSchedule',
                            data: $form.serialize(),
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8'
                        }),
                        $.ajax({
                            type: 'post',
                            url: '/Schedules/ChangeDate',
                            data: $form.serialize(),
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8'
                        }),
                        $.ajax({
                            type: 'post',
                            url: '/Schedules/SameDay',
                            data: $form.serialize(),
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8'
                        }),
                        $.ajax({
                            type: 'post',
                            url: '/Schedules/OverStartTime',
                            data: $form.serialize(),
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8'
                        })
                    ]).then(([sameScheduleResponse, changeDateResponse, sameDayResponse, overStartTimeResponse]) => {
                 
                        if (sameScheduleResponse.warning) {
                            if (confirm(sameScheduleResponse.message) == false) {
                                return;
                            }
                        }
                        if (sameDayResponse.warning) {
                            serverErrorModal(sameDayResponse.message);
                            return;
                        }
                        if (changeDateResponse.warning) {
                            serverErrorModal(changeDateResponse.message);
                            return;                            
                        }
                        if (overStartTimeResponse.warning) {
                            serverErrorModal(overStartTimeResponse.message);
                            return;
                        }


                        var callback = function () {
                            $.ajax({
                                type: 'post',
                                url: $form.attr('action'), // 送信先URL
                                data: $form.serialize(), // フォームデータ
                                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                            }).done((data) => {
                                if (data.success) {
                                    location.reload();
                                }
                                else {
                                    $('#modalContentPlaceholder').html(data);
                                    showErrorModal();
                                }
                            });
                        };

                        if ($form.attr('action') === '/Schedules/Create') {
                            showConfirmationModal('/Schedules/Create', '新規登録します。よろしいですか？', callback);
                        }
                        else {
                            showConfirmationModal('/Schedules/Update', '更新します。よろしいですか？', callback);
                        }
                    });                
                });
            };        
        });

</script>
}

