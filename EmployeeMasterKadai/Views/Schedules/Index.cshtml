@model IEnumerable<EmployeeMasterKadai.Models.Schedule>
@using EmployeeMasterKadai.Models

@{
    ViewData["Title"] = "スケジュール";
    var employeeLists = ViewBag.EmployeeContext as IEnumerable<Employee>;
}

<!-- 追加モーダルを表示するボタン -->
<button type="button" class="btn btn-primary mb-3" id="createModal">
    追加<i class="bi bi-person-add"></i>
</button>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Organizer)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TypeToDo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AllDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.JoinPeople)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @{
                    var organizerId = Guid.Parse(item.Organizer);
                    var selectEmployee = employeeLists.FirstOrDefault(e => e.Id == organizerId);

                    if (selectEmployee != null)
                    {
                            <div>@selectEmployee.Name</div>
                    }
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TypeToDo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AllDay)
            </td>
            <td>
                    @{
                        if (item.StartDay.HasValue)
                        {
                            var startTimeValue = item.StartDay.Value.ToString("HH:mm");
                            var startDayValue = item.StartDay.Value.ToString("yyyy/MM/dd");

                            if (startTimeValue != "00:00")
                            {
                                    @Html.DisplayFor(modelItem => item.StartDay)
                            }
                            else
                            {
                                    @Html.DisplayFor(modelItem => startDayValue)
                            }
                        }
                    }
            </td>
            <td>
                    @{
                        if (item.EndDay.HasValue) 
                        {
                            var endTimeValue = item.EndDay.Value.ToString("HH:mm");
                            var endDayValue = item.EndDay.Value.ToString("yyyy/MM/dd");

                            if (endTimeValue != "00:00")
                            {
                                    @Html.DisplayFor(modelItem => item.EndDay)
                            }
                            else
                            {
                                    @Html.DisplayFor(modelItem => endDayValue)
                            }
                        }
                    }

            </td>      
            <td>
                @{
                    HashSet<Guid> selectedEmployeeIds = new HashSet<Guid>(item.JoinPeople);
                }

                @foreach (var employeeId in item.JoinPeople)
                {                       
                    var employees = ViewBag.EmployeeContext as IEnumerable<Employee>;
                    var employee = employees.FirstOrDefault(e => e.Id == employeeId);

                    <div>@employee.Name</div>
                }

            </td>
            <td>
                <button type="button" class="btn btn-primary editModal" data-id="@item.Id" data-all="@item.AllDay">
                    編集<i class="bi bi-person-add"></i>
                </button>
                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">削除</a>
            </td>
        </tr>
}
    </tbody>
</table>

<!-- モーダルウィンドウ -->
<div class="modal fade" id="externalModal" tabindex="-1" aria-labelledby="externalModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title fs-5 mb-1 mt-1" id="exampleModalLabel"></div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalContentPlaceholder"></div>
            <div class="modal-footer" id="modalFooter"></div>
        </div>
    </div>
</div>

<!--エラーのモーダルウィンドウ-->
<div class="modal fade" id="messageModal" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="background-color: #f5f5f5 ">
            <div class="modal-header">
                <div class="modal-title fs-5 mb-1 mt-1" id="messageLavel"></div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" id="CloseBtn" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-5 pb-5 fw-bold fs-6" id="modalBody"></div>
            <div class="modal-footer p-1" id="closeModalBtn"></div>
        </div>
    </div>
</div>

@* スケジュールエラーのモーダルウィンドウ *@
<div class="modal fade" id="scheduleModal" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="background-color: #f5f5f5 ">
            <div class="modal-header">
                <div class="modal-title fs-5" id="scheduleLavel"></div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" id="CloseBtn" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-5 pb-5 fw-bold fs-6" id="scheduleBody"></div>
            <div class="modal-footer p-1" id="scheduleBtn"></div>
        </div>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
<script src="~/js/Common.js"></script>

<script>
    let all;
    $(document).ready(function () {
        
        $('.editModal').on('click', function (e) {
            e.preventDefault();
            $('#externalModal').modal('show');

            const itemId = $(this).data('id');
            all = $(this).data('all');


            $.ajax({
                url: '/Schedules/Edit/' + itemId,
                type: 'GET',
                success: function (data) {

                    $('#modalContentPlaceholder').html(data);
                    $('#exampleModalLabel').text('スケジュールの編集');
                    setAllDayChecked(all);

                    $('#AllDay').on('change', function () {
                        changeAllDayChecked(this);
                    });
                    scheduleTime();
                        
                    setEditDateTime();
                    initForm();
                }
            });
        });

        $('#createModal').on('click', function (e) {
            e.preventDefault();
            $('#externalModal').modal('show');

            $.ajax({
                url: '/Schedules/Create',
                type: 'GET',
                success: function (data) {

                    $('#modalContentPlaceholder').html(data);
                    $('#exampleModalLabel').text('スケジュールの登録');
                    setupTime();

                    $('#AllDay').on('change', function () {
                        changeAllDayChecked(this);
                    });
                    scheduleTime();
                    initForm();
                }
            });
        });

        //既存の終日チェック確認
        function setAllDayChecked(allDay) {
            const allDayFlagString = allDay.toString();
            const startTimeBox = $('#startTimeBox');
            const endTimeBox = $('#endTimeBox');

            if (allDayFlagString === "False") {
                $('#startTime').prop('readonly', false);
                startTimeBox.find('input').prop('disabled', false).removeAttr('readonly').css('background-color', '#ffffff');
                endTimeBox.find('input').prop('disabled', false).removeAttr('readonly').css('background-color', '#ffffff');
            } 
            else {
                $('#startTime').prop('readonly', true);
                startTimeBox.find('input').prop('disabled', true).attr('readonly', true).css('background-color', '#f2f2f2');
                endTimeBox.find('input').prop('disabled', true).attr('readonly', true).css('background-color', '#f2f2f2');
            }
        }
        //終日チェックの有無で入力フィールド随時変更
        function changeAllDayChecked(check) {
            const allDayChecked = $(check).prop('checked');
            const startTimeBox = $('#startTimeBox');
            const endTimeBox = $('#endTimeBox');

            if (allDayChecked) {
                $('#startTime').prop('readonly', true);
                startTimeBox.find('input').prop('disabled', true).attr('readonly', true).css('background-color', '#f2f2f2').val('');
                endTimeBox.find('input').prop('disabled', true).attr('readonly', true).css('background-color', '#f2f2f2').val('');
            } 
            else {
                $('#startTime').prop('readonly', false);
                startTimeBox.find('input').prop('disabled', false).removeAttr('readonly').css('background-color', '#ffffff');
                endTimeBox.find('input').prop('disabled', false).removeAttr('readonly').css('background-color', '#ffffff');
            }
        }

        //クライアントサイド入力チェック
        function isValid(startDateValue, startTimeValue, endDateValue, endTimeValue, allDay) {
            let message = "";

            if ((!startTimeValue || !endTimeValue) && allDay === false) {
                return "クライアントサイド：開始時刻と終了時刻を入力してください。";
            }
            if ((startDateValue > endDateValue && allDay === true) || (startDateValue == endDateValue && startTimeValue > endTimeValue && allDay === false)) {
                message += "クライアントサイド：開始時刻が終了時刻を超えることはできません。";
            }
            if ((startDateValue > endDateValue && allDay === true) || (startDateValue == endDateValue && startTimeValue == endTimeValue && allDay === false)) {
                message += "クライアントサイド：開始時刻と終了時刻が同じになっています。";
            }
            return message || null;
        };
        //ここまで消す

        function setupTime() {
            const today = new Date();
            const year = today.getFullYear();
            const month = String(today.getMonth() + 1).padStart(2, '0');
            const day = String(today.getDate()).padStart(2, '0');
            const formattedDate = year + '-' + month + '-' + day;

            $('#startDate').val(formattedDate);
            $('#endDate').val(formattedDate);
        }

        function reSaveSchedule() {
            $('#AllDay').prop('checked', false);

            $('#AllDay').on('change', function () {
                changeAllDayChecked(this);
            });

            scheduleTime();
            initForm()
        }


        function initForm()  {
            const $form = $('#modalContentPlaceholder').find('form');         

            $.validator.unobtrusive.parse($form);

            $form.on('submit', function (e) {
                e.preventDefault();

                if (!$form.valid()) {
                    showErrorModal();
                    return false;
                 }

            // 開始日と開始時刻の値を取得
            const startDateValue = $('#startDate').val();
            const startTimeValue = $('#startTime').val();
            const endDateValue = $('#endDate').val();
            const endTimeValue = $('#endTime').val();
            const allDay = $('#AllDay').prop('checked');
            const validationMessage = isValid(startDateValue, startTimeValue, endDateValue, endTimeValue, allDay);


            if (validationMessage) {
                showErrorModal();
                serverErrorModal(validationMessage);
                initForm();
            }
            //ここまで消す

            const callback = function () {
                $.ajax({
                    type: 'post',
                    url: $form.attr('action'),
                    data: $form.serialize(),
                    contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                }).done((data) => {
                    if (data.success) {
                        location.reload();
                    }
                    else {
                        $('#modalContentPlaceholder').html(data);
  
                        setupTime();
                        reSaveSchedule();
                    }
                });
            };

            const savedata = function () {
                if ($form.attr('action') === '/Schedules/Create') {
                    showConfirmationModal('/Schedules/Create', '新規登録します。よろしいですか？', callback);
                }
                else {
                    showConfirmationModal('/Schedules/Update', '更新します。よろしいですか？', callback);
                }
            }　//ここから
                if (!validationMessage) {
                    Promise.all([
                        $.ajax({
                            type: 'post',
                            url: '/Schedules/ErrorCheck',
                            data: $form.serialize(),
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8'
                        }),
                        $.ajax({
                            type: 'post',
                            url: '/Schedules/SameSchedule',
                            data: $form.serialize(),
                            contentType: 'application/x-www-form-urlencoded; charset=utf-8'
                        })
                    ]).then(([errorCheckResponse, sameScheduleResponse]) => {

                        if (errorCheckResponse.warning) {
                            serverErrorModal(errorCheckResponse.message);
                            return;
                        }
                        if (sameScheduleResponse.warning) {
                            scheduleErrorModal(sameScheduleResponse.message, savedata);
                            return;
                        }

                         savedata();　ここは残す
                    });                
                    }
                    ここまで消す
                });
            };        
        });
</script>
}

